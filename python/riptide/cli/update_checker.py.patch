--- update_checker.py	2023-07-17 10:06:16.000000000 +0200
+++ update_checker.py	2023-07-24 22:24:07.143239720 +0200
@@ -5,7 +5,7 @@
 from typing import Optional, Dict
 from urllib import request
 
-import pkg_resources
+from importlib.metadata import distribution, packages_distributions, Distribution
 from packaging import version
 
 from riptide.config.files import riptide_config_dir
@@ -22,7 +22,7 @@
         if doc["time"] + 604_800 > time.time():  # 7 days
             cache_is_valid = True
             for pkg_name, cached_ver in doc["versions"].items():
-                dist = pkg_resources.get_distribution(pkg_name)
+                dist = distribution(pkg_name)
                 if dist.version == cached_ver:
                     cache_is_valid = False
                     break
@@ -33,19 +33,19 @@
         pass
 
     versions = {}
-    for pkg in pkg_resources.working_set:
-        if pkg.key.startswith('riptide-'):
-            try:
-                repo_url = _get_repo_url_for_egg(pkg)
-                repo_url = repo_url.replace("github.com", "raw.githubusercontent.com")
-                remote_setuppy = request.urlopen(f"{repo_url}release/setup.py").read().decode('utf-8')
-                rematch = REGEX_VERSION.match(remote_setuppy.splitlines()[0])
-                if rematch:
-                    upstream_version = version.parse(rematch.group(1))
-                    if upstream_version > version.parse(str(pkg.version)):
-                        versions[pkg.key] = str(upstream_version)
-            except Exception:
-                pass
+    for pkg_name in packages_distributions()['riptide']:
+        try:
+            pkg = distribution(pkg_name)
+            repo_url = _get_repo_url_for_egg(pkg)
+            repo_url = repo_url.replace("github.com", "raw.githubusercontent.com")
+            remote_setuppy = request.urlopen(f"{repo_url}release/setup.py").read().decode('utf-8')
+            rematch = REGEX_VERSION.match(remote_setuppy.splitlines()[0])
+            if rematch:
+                upstream_version = version.parse(rematch.group(1))
+                if upstream_version > version.parse(str(pkg.version)):
+                    versions[pkg_name] = str(upstream_version)
+        except Exception:
+            pass
     try:
         with open(cache_path, 'w') as f:
             json.dump({'time': int(time.time()) , 'versions': versions}, f)
@@ -54,14 +54,8 @@
     return versions
 
 
-def _get_repo_url_for_egg(pkg: pkg_resources.Distribution):
-    # There's no real convenient public API for this, but this shouldn't break anytime soon:
-    # noinspection PyProtectedMember
-    lines = pkg._get_metadata(pkg.PKG_INFO)
-    version_lines = filter(lambda l: l.lower().startswith('home-page:'), lines)
-    line = next(iter(version_lines), '')
-    _, _, value = line.partition(':')
-    return value.strip()
+def _get_repo_url_for_egg(pkg: Distribution):
+    return pkg.metadata['Home-page'].strip()
 
 
 def get_version_cache_path():
